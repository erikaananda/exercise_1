
#spark BEST SURVEY RANKING
create or replace view V_BEST_SURVEY
AS
SELECT PROVR_ID, HOSP_NM, HOSP_ST_CD, 
CAST(BASE_SCORE as float) + CAST(CONST_SCORE as float) as SURVEY_SCORE
FROM T_HOSP
WHERE BASE_SCORE <> 'Not Available'
and CONST_SCORE <> 'Not Available'
ORDER BY SURVEY_SCORE  DESC
LIMIT 200;

# look at the top hospitals by patient survey
SELECT PROVR_ID, HOSP_NM, HOSP_ST_CD, SURVEY_SCORE,
rank() OVER (ORDER BY SURVEY_SCORE DESC)
FROM V_BEST_SURVEY
WHERE SURVEY_SCORE = 100
;
# there are 23 hopitals with the maximum rating

# to differentiate them, let's order by their Care Scores
SELECT VS.PROVR_ID, VS.HOSP_NM, VS.HOSP_ST_CD, VS.SURVEY_SCORE,
round(AVG((cast(M.RAW_SCORE as float) - VM.AVG_SCORE) / VM.STDEV_SCORE), 2) as AVG_SD_SCORE,
rank() OVER (ORDER BY VS.SURVEY_SCORE DESC)
FROM V_BEST_SURVEY VS, T_HOSP_MEDL_MEAS_SCORE M, V_MEDL_MEAS_VAR VM, V_VALID_HOSP VH
WHERE VS.PROVR_ID = M.PROVR_ID
AND VS.PROVR_ID = VH.PROVR_ID
AND M.MEDL_MEAS_ID = VM.MEDL_MEAS_ID
AND M.RAW_Score  <> 'Not Available'
and M.MEDL_MEAS_ID NOT IN ("ED_2b", "OP_18b", "OP_20", "OP_21", "OP_5", "OP_3b", "ED_1b")
and substring(M.MEDL_MEAS_ID,1, 4) NOT IN ("MORT", "READ")
GROUP BY VS.PROVR_ID, VS.HOSP_NM, VS.HOSP_ST_CD, VS.SURVEY_SCORE
ORDER BY VS.SURVEY_SCORE DESC, AVG_SD_SCORE DESC
LIMIT 10;
# None of our survey top ranked hospitals qualify on our minumum number of care measures,
# although OKLAHOMA HEART HOSPITAL gets close to 100

# Let's try again, dropping the number of required care measures to 10
select H.PROVR_ID, H.HOSP_NM, 
CAST(H.BASE_SCORE as float) + CAST(H.CONST_SCORE as float) as SURVEY_SCORE, 
count(M.medl_meas_id) as meas_count,
round(AVG((cast(M.RAW_SCORE as float) - VM.AVG_SCORE) / VM.STDEV_SCORE), 2) as AVG_SD_SCORE,
rank() OVER (ORDER BY AVG((cast(M.RAW_SCORE as float) - VM.AVG_SCORE) / VM.STDEV_SCORE) DESC)
from T_HOSP_MEDL_MEAS_SCORE  M, T_HOSP H, V_MEDL_MEAS_VAR VM
where M.PROVR_ID = H.PROVR_ID
AND CAST(H.BASE_SCORE as float) + CAST(H.CONST_SCORE as float) = 100
AND M.MEDL_MEAS_ID = VM.MEDL_MEAS_ID
AND M.RAW_Score  <> 'Not Available'
and M.MEDL_MEAS_ID NOT IN ("ED_2b", "OP_18b", "OP_20", "OP_21", "OP_5", "OP_3b", "ED_1b")
and substring(M.MEDL_MEAS_ID,1, 4) NOT IN ("MORT", "READ")
group by H.PROVR_ID, H.HOSP_NM, H.BASE_SCORE, H.CONST_SCORE
having meas_count > 10
limit 10
;


# SPARK BEST CARE WITH LOW MORTALITY FILTER, and HIGH SURVEY SCORES
SELECT C.PROVR_ID, C.HOSP_NM, S.SURVEY_SCORE,
C.SUM_SCORE AS CARE_SUM_SCORE,C.AVG_SCORE AS CARE_AVG_SCORE, C.AVG_SD_SCORE AS CARE_AVG_SD_SCORE,
M.SUM_SCORE AS MORT_SUM_SCORE,M.AVG_SCORE AS MORT_AVG_SCORE, M.AVG_SD_SCORE AS MORT_AVG_SD_SCORE,
rank() OVER (ORDER BY C.AVG_SD_SCORE DESC)
FROM V_BEST_CARE C, V_LOWEST_MORT M, V_BEST_SURVEY S
WHERE C.PROVR_ID = M.PROVR_ID
and S.PROVR_ID = C.PROVR_ID
LIMIT 10;

# no results for high survey, high care and low mortality overlap 


# SPARK BEST CARE WITH HIGH SURVEY SCORES
SELECT C.PROVR_ID, C.HOSP_NM, S.SURVEY_SCORE,
C.AVG_SCORE AS CARE_AVG_SCORE, C.AVG_SD_SCORE AS CARE_AVG_SD_SCORE,
rank() OVER (ORDER BY C.AVG_SD_SCORE DESC, S.SURVEY_SCORE DESC)
FROM V_BEST_CARE C, V_BEST_SURVEY S
WHERE S.PROVR_ID = C.PROVR_ID
LIMIT 10;


SELECT PROVR_ID, HOSP_NM, 
CAST(BASE_SCORE AS FLOAT) + CAST(CONST_SCORE AS FLOAT)  
FROM T_HOSP
WHERE HOSP_CITY_NM IN ("SAN MATEO", "REDWOOD CITY", "BURLINGAME");
51.0

# look at local hospitals
050007	MILLS-PENINSULA MEDICAL CENTER	51.0
050113	SAN MATEO MEDICAL CENTER	14.0
050197	SEQUOIA HOSPITAL	15.0
050541	KAISER FOUNDATION HOSPITAL - REDWOOD CITY	41.0

select H.PROVR_ID, H.HOSP_NM, M.SRVY_MEAS_ID, M.SRVY_MEAS_DESC, MS.DIM_SCORE
from T_HOSP_SRVY_MEAS_SCORE MS, T_SRVY_MEAS M, T_HOSP H
where MS.PROVR_ID in ('050007', '050113', '050197', '050541')
and M.SRVY_MEAS_ID = MS.SRVY_MEAS_ID
AND MS.PROVR_ID = H.PROVR_ID
;