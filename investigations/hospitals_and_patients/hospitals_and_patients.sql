
#spark BEST SURVEY RANKING
create or replace view V_BEST_SURVEY
AS
SELECT PROVR_ID, HOSP_NM, HOSP_ST_CD, CAST(BASE_SCORE as float) as BASE_SCORE, CONST_SCORE
FROM T_HOSP
WHERE BASE_SCORE <> 'Not Available'
ORDER BY BASE_SCORE  DESC
LIMIT 200;


SELECT PROVR_ID, HOSP_NM, HOSP_ST_CD, BASE_SCORE, CONST_SCORE
FROM V_BEST_SURVEY
ORDER BY BASE_SCORE  DESC
LIMIT 10;

# SPARK BEST CARE WITH LOW MORTALITY FILTER, and HIGH SURVEY SCORES
SELECT C.PROVR_ID, C.HOSP_NM, 
C.BASE_SCORE AS BASE_SCORE, C.CONST_SCORE AS CONST_SCORE,
C.SUM_SCORE AS CARE_SUM_SCORE,C.AVG_SCORE AS CARE_AVG_SCORE, C.AVG_SD_SCORE AS CARE_AVG_SD_SCORE,
M.SUM_SCORE AS MORT_SUM_SCORE,M.AVG_SCORE AS MORT_AVG_SCORE, M.AVG_SD_SCORE AS MORT_AVG_SD_SCORE
FROM V_BEST_CARE C, V_LOWEST_MORT M, V_BEST_SURVEY S
WHERE C.PROVR_ID = M.PROVR_ID
and S.PROVR_ID = C.PROVR_ID
order by C.AVG_SD_SCORE DESC
LIMIT 10;

# SPARK BEST CARE WITH HIGH SURVEY SCORES
SELECT C.PROVR_ID, C.HOSP_NM, 
C.BASE_SCORE AS BASE_SCORE, C.CONST_SCORE AS CONST_SCORE,
C.SUM_SCORE AS CARE_SUM_SCORE,C.AVG_SCORE AS CARE_AVG_SCORE, C.AVG_SD_SCORE AS CARE_AVG_SD_SCORE
FROM V_BEST_CARE C, V_BEST_SURVEY S
WHERE S.PROVR_ID = C.PROVR_ID
order by C.AVG_SD_SCORE DESC
LIMIT 10;