
#spark BEST SURVEY RANKING
create or replace view V_BEST_SURVEY
AS
SELECT PROVR_ID, HOSP_NM, HOSP_ST_CD, CAST(BASE_SCORE as float) as BASE_SCORE, CONST_SCORE
FROM T_HOSP
WHERE BASE_SCORE <> 'Not Available'
ORDER BY BASE_SCORE  DESC
LIMIT 200;

# look at the top 10
SELECT PROVR_ID, HOSP_NM, HOSP_ST_CD, BASE_SCORE, CONST_SCORE,
rank() OVER (ORDER BY BASE_SCORE DESC)
FROM V_BEST_SURVEY
LIMIT 10;

# there are too many hopitals with the same top rating
# let's order by their Care Scores
SELECT VS.PROVR_ID, VS.HOSP_NM, VS.HOSP_ST_CD, VS.BASE_SCORE, VS.CONST_SCORE,
round(AVG((cast(M.RAW_SCORE as float) - VM.AVG_SCORE) / VM.STDEV_SCORE), 2) as AVG_SD_SCORE,
rank() OVER (ORDER BY VS.BASE_SCORE DESC)
FROM V_BEST_SURVEY VS, T_HOSP_MEDL_MEAS_SCORE M, V_MEDL_MEAS_VAR VM, V_VALID_HOSP VH
WHERE VS.PROVR_ID = M.PROVR_ID
AND VS.PROVR_ID = VH.PROVR_ID
AND M.MEDL_MEAS_ID = VM.MEDL_MEAS_ID
AND M.RAW_Score  <> 'Not Available'
and M.MEDL_MEAS_ID NOT IN ("EDV", "MV", "ED_1b", "ED_2b", "OP_18b")
and substring(M.MEDL_MEAS_ID,1, 4) NOT IN ("MORT", "READ")
GROUP BY VS.PROVR_ID, VS.HOSP_NM, VS.HOSP_ST_CD, VS.BASE_SCORE, VS.CONST_SCORE
ORDER BY VS.BASE_SCORE, AVG_SD_SCORE DESC
LIMIT 10;

# None of our survey top ranked hospitals qualify on our minumum number of care measures
# Let's try again, dropping the number of required measures to 10
select H.PROVR_ID, H.HOSP_NM, CAST(BASE_SCORE as float) as BASE_SCORE, CONST_SCORE, 
count(M.medl_meas_id) as meas_count,
round(AVG((cast(M.RAW_SCORE as float) - VM.AVG_SCORE) / VM.STDEV_SCORE), 2) as AVG_SD_SCORE,
rank() OVER (ORDER BY AVG((cast(M.RAW_SCORE as float) - VM.AVG_SCORE) / VM.STDEV_SCORE) DESC)
from T_HOSP_MEDL_MEAS_SCORE  M, T_HOSP H, V_MEDL_MEAS_VAR VM
where M.PROVR_ID = H.PROVR_ID
AND H.BASE_SCORE = 80
AND M.MEDL_MEAS_ID = VM.MEDL_MEAS_ID
AND M.RAW_Score  <> 'Not Available'
and M.MEDL_MEAS_ID NOT IN ("EDV", "MV", "ED_1b", "ED_2b", "OP_18b")
and substring(M.MEDL_MEAS_ID,1, 4) NOT IN ("MORT", "READ")
group by H.PROVR_ID, H.HOSP_NM, BASE_SCORE, CONST_SCORE
having meas_count > 10
limit 10
;


# SPARK BEST CARE WITH LOW MORTALITY FILTER, and HIGH SURVEY SCORES
SELECT C.PROVR_ID, C.HOSP_NM, 
C.BASE_SCORE AS BASE_SCORE, C.CONST_SCORE AS CONST_SCORE,
C.SUM_SCORE AS CARE_SUM_SCORE,C.AVG_SCORE AS CARE_AVG_SCORE, C.AVG_SD_SCORE AS CARE_AVG_SD_SCORE,
M.SUM_SCORE AS MORT_SUM_SCORE,M.AVG_SCORE AS MORT_AVG_SCORE, M.AVG_SD_SCORE AS MORT_AVG_SD_SCORE,
rank() OVER (ORDER BY C.AVG_SD_SCORE DESC)
FROM V_BEST_CARE C, V_LOWEST_MORT M, V_BEST_SURVEY S
WHERE C.PROVR_ID = M.PROVR_ID
and S.PROVR_ID = C.PROVR_ID
LIMIT 10;

# no results for high survey, high care and low mortality overlap 


# SPARK BEST CARE WITH HIGH SURVEY SCORES
SELECT C.PROVR_ID, C.HOSP_NM, 
C.BASE_SCORE AS BASE_SCORE, C.CONST_SCORE AS CONST_SCORE,
C.AVG_SCORE AS CARE_AVG_SCORE, C.AVG_SD_SCORE AS CARE_AVG_SD_SCORE,
rank() OVER (ORDER BY C.AVG_SD_SCORE DESC, C.BASE_SCORE DESC)
FROM V_BEST_CARE C, V_BEST_SURVEY S
WHERE S.PROVR_ID = C.PROVR_ID
LIMIT 10;